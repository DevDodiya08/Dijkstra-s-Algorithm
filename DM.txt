//*********DM Project for finding the shortest path*********
#include <iostream>
#include <vector>
#include <queue>
#include <climits>
using namespace std;

class Graph {
private:
    int V;
    vector<vector<pair<int ,int >>> adjList;

public:
    Graph(int vertices) {
        V = vertices;
        adjList.resize(V);
    }

    void createedge(int u, int v, int weight) {
        adjList[u].push_back(make_pair(v, weight));
        adjList[v].push_back(make_pair(u, weight));
    }

    vector<int> dijkstra(int source) {
        vector<int> dist(V, INT_MAX);
        vector<bool> visited(V, false);
        priority_queue<pair<int ,int >, vector<pair<int ,int >>, greater<pair<int ,int >>> pq;

        dist[source] = 0;
        pq.push(make_pair(0, source));

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            visited[u] = true;

            for (const auto& neighbor : adjList[u]) {
                int v = neighbor.first;
                int weight = neighbor.second;

                if (!visited[v] && dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push(make_pair(dist[v], v));
                }
            }
        }

        return dist;
    }
};

int main() {
    int V = 11; // Number of vertices

    Graph g1(V);

    // Add edges (representing roads) with their weights (distances)
    g1.createedge(0, 1, 4);
    g1.createedge(0, 2, 3);
    g1.createedge(1, 2, 5);
    g1.createedge(1, 3, 4);
    g1.createedge(1, 4, 6);
    g1.createedge(2, 3, 8);
    //g1.createedge(0, 3, 10);
    g1.createedge(3, 4, 2);
    g1.createedge(3, 6, 3);
    g1.createedge(4, 6, 3);
    g1.createedge(5, 6, 10);
    g1.createedge(5, 2, 4);

    int source = 0;
    vector<int> distances = g1.dijkstra(source);

    cout << "Shortest path distances from vertex " << source << ":\n";
    for (int i = 0; i <=6; ++i) {
        cout << "Vertex " << i << ": " << distances[i] << "\n";
    }

}